{"version":3,"file":"main-BvguumbV.js","sources":["../../src/data/stopwords.ts","../../src/lib/tokenizer.ts","../../src/lib/stemmers.ts","../../src/lib/promptpress.ts","../../src/index.ts"],"sourcesContent":["export const stopwords: Record<string, string[]> = {\n    english: [\n        'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours',\n        'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers',\n        'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves',\n        'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are',\n        'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does',\n        'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until',\n        'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into',\n        'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down',\n        'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here',\n        'there', 'when', 'where', 'why', 'how', 'all', 'both', 'each', 'few', 'more', 'most',\n        'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't',\n        'can', 'will', 'just', 'should', 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain',\n        'aren', 'couldn', 'didn', 'doesn', 'hadn', 'hasn', 'haven', 'isn', 'ma', 'mightn',\n        'mustn', 'needn', 'shan', 'shouldn', 'wasn', 'weren', 'won', 'wouldn'\n    ],\n    spanish: [\n        'yo', 'mi', 'mío', 'mía', 'míos', 'mías', 'tú', 'tu', 'tuyo', 'tuya', 'tuyos', 'tuyas',\n        'él', 'ella', 'ello', 'ellos', 'ellas', 'su', 'suyo', 'suya', 'suyos', 'suyas',\n        'nosotros', 'nosotras', 'nuestro', 'nuestra', 'nuestros', 'nuestras', 'vosotros',\n        'vosotras', 'vuestro', 'vuestra', 'vuestros', 'vuestras', 'qué', 'cuál', 'quién',\n        'cuánto', 'este', 'esta', 'estos', 'estas', 'ese', 'esa', 'esos', 'esas', 'aquel',\n        'aquella', 'aquellos', 'aquellas', 'soy', 'eres', 'es', 'somos', 'sois', 'son',\n        'era', 'eras', 'éramos', 'erais', 'eran', 'fui', 'fuiste', 'fue', 'fuimos',\n        'fuisteis', 'fueron', 'seré', 'serás', 'será', 'seremos', 'seréis', 'serán',\n        'he', 'has', 'ha', 'hemos', 'habéis', 'han', 'había', 'habías', 'habíamos',\n        'habíais', 'habían', 'hube', 'hubiste', 'hubo', 'hubimos', 'hubisteis', 'hubieron',\n        'habré', 'habrás', 'habrá', 'habremos', 'habréis', 'habrán', 'un', 'una', 'unos',\n        'unas', 'el', 'la', 'los', 'las', 'y', 'pero', 'si', 'o', 'porque', 'como',\n        'hasta', 'mientras', 'de', 'del', 'en', 'por', 'para', 'con', 'sobre', 'contra',\n        'entre', 'hacia', 'durante', 'antes', 'después', 'desde', 'a', 'al', 'aquí',\n        'ahí', 'allí', 'cuando', 'donde', 'por qué', 'cómo', 'todo', 'toda', 'todos',\n        'todas', 'cada', 'poco', 'mucho', 'más', 'menos', 'otro', 'otra', 'otros',\n        'otras', 'algún', 'alguna', 'algunos', 'algunas', 'mismo', 'misma', 'mismos',\n        'mismas', 'así', 'tan', 'también', 'muy'\n    ],\n    french: [\n        'je', 'me', 'moi', 'mon', 'ma', 'mes', 'tu', 'te', 'toi', 'ton', 'ta', 'tes',\n        'il', 'elle', 'on', 'lui', 'son', 'sa', 'ses', 'nous', 'notre', 'nos', 'vous',\n        'votre', 'vos', 'ils', 'elles', 'eux', 'leur', 'leurs', 'qui', 'que', 'quoi',\n        'quel', 'quelle', 'quels', 'quelles', 'ce', 'cet', 'cette', 'ces', 'ceci',\n        'cela', 'ça', 'suis', 'es', 'est', 'sommes', 'êtes', 'sont', 'étais', 'était',\n        'étions', 'étiez', 'étaient', 'fus', 'fut', 'fûmes', 'fûtes', 'furent', 'serai',\n        'seras', 'sera', 'serons', 'serez', 'seront', 'ai', 'as', 'a', 'avons', 'avez',\n        'ont', 'avais', 'avait', 'avions', 'aviez', 'avaient', 'eus', 'eut', 'eûmes',\n        'eûtes', 'eurent', 'aurai', 'auras', 'aura', 'aurons', 'aurez', 'auront', 'un',\n        'une', 'des', 'le', 'la', 'les', 'du', 'de', 'et', 'mais', 'ou', 'si', 'car',\n        'parce', 'comme', 'quand', 'où', 'pourquoi', 'comment', 'avec', 'sans', 'sous',\n        'sur', 'dans', 'en', 'à', 'au', 'aux', 'pour', 'par', 'vers', 'chez', 'contre',\n        'entre', 'depuis', 'pendant', 'avant', 'après', 'devant', 'derrière', 'ici',\n        'là', 'tout', 'toute', 'tous', 'toutes', 'chaque', 'quelque', 'quelques',\n        'plusieurs', 'beaucoup', 'peu', 'plus', 'moins', 'très', 'trop', 'assez',\n        'autre', 'autres', 'même', 'mêmes', 'tel', 'telle', 'tels', 'telles', 'ainsi',\n        'alors', 'donc', 'encore', 'aussi', 'déjà', 'jamais', 'toujours', 'souvent',\n        'parfois', 'd', 'l', 'qu', 'n', 's', 't', 'y', 'aucun', 'aucune', 'nul', 'nulle'\n    ],\n    german: [\n        'ich', 'mir', 'mich', 'mein', 'meine', 'meiner', 'meines', 'du', 'dir', 'dich',\n        'dein', 'deine', 'deiner', 'deines', 'er', 'sie', 'es', 'ihm', 'ihn', 'ihr',\n        'sein', 'seine', 'seiner', 'seines', 'ihre', 'ihrer', 'ihres', 'wir', 'uns',\n        'unser', 'unsere', 'unserer', 'unseres', 'ihr', 'euch', 'euer', 'eure', 'eurer',\n        'eures', 'sie', 'ihnen', 'ihr', 'ihre', 'ihrer', 'ihres', 'wer', 'was', 'welcher',\n        'welche', 'welches', 'dieser', 'diese', 'dieses', 'jener', 'jene', 'jenes',\n        'bin', 'bist', 'ist', 'sind', 'seid', 'war', 'warst', 'waren', 'wart', 'werde',\n        'wirst', 'wird', 'werden', 'werdet', 'habe', 'hast', 'hat', 'haben', 'habt',\n        'hatte', 'hattest', 'hatten', 'hattet', 'ein', 'eine', 'einer', 'eines', 'der',\n        'die', 'das', 'den', 'dem', 'des', 'und', 'oder', 'aber', 'denn', 'wenn', 'weil',\n        'als', 'wie', 'wo', 'wann', 'warum', 'mit', 'ohne', 'zu', 'von', 'nach', 'bei',\n        'aus', 'in', 'an', 'auf', 'über', 'unter', 'vor', 'hinter', 'neben', 'zwischen',\n        'für', 'gegen', 'durch', 'um', 'hier', 'da', 'dort', 'jetzt', 'dann', 'heute',\n        'gestern', 'morgen', 'alle', 'alles', 'jeder', 'jede', 'jedes', 'einige',\n        'manche', 'viele', 'wenige', 'mehr', 'weniger', 'sehr', 'zu', 'ganz', 'andere',\n        'anderer', 'anderes', 'selbst', 'selber', 'so', 'auch', 'noch', 'schon', 'nur',\n        'auch', 'wieder', 'immer', 'nie', 'oft', 'manchmal'\n    ],\n    italian: [\n        'io', 'me', 'mi', 'mio', 'mia', 'miei', 'mie', 'tu', 'te', 'ti', 'tuo', 'tua',\n        'tuoi', 'tue', 'lui', 'lei', 'lo', 'la', 'gli', 'le', 'suo', 'sua', 'suoi',\n        'sue', 'noi', 'ci', 'nostro', 'nostra', 'nostri', 'nostre', 'voi', 'vi',\n        'vostro', 'vostra', 'vostri', 'vostre', 'loro', 'li', 'le', 'loro', 'chi',\n        'che', 'cosa', 'quale', 'quali', 'questo', 'questa', 'questi', 'queste',\n        'quello', 'quella', 'quelli', 'quelle', 'sono', 'sei', 'è', 'siamo', 'siete',\n        'ero', 'eri', 'era', 'eravamo', 'eravate', 'erano', 'sarò', 'sarai', 'sarà',\n        'saremo', 'sarete', 'saranno', 'ho', 'hai', 'ha', 'abbiamo', 'avete', 'hanno',\n        'avevo', 'avevi', 'aveva', 'avevamo', 'avevate', 'avevano', 'avrò', 'avrai',\n        'avrà', 'avremo', 'avrete', 'avranno', 'un', 'uno', 'una', 'il', 'lo', 'la',\n        'i', 'gli', 'le', 'del', 'dello', 'della', 'dei', 'degli', 'delle', 'e', 'ma',\n        'o', 'se', 'perché', 'come', 'quando', 'dove', 'con', 'senza', 'su', 'giù',\n        'in', 'a', 'da', 'di', 'per', 'tra', 'fra', 'sopra', 'sotto', 'davanti',\n        'dietro', 'prima', 'dopo', 'durante', 'qui', 'qua', 'lì', 'là', 'tutto',\n        'tutta', 'tutti', 'tutte', 'ogni', 'qualche', 'alcuni', 'alcune', 'molti',\n        'molte', 'pochi', 'poche', 'più', 'meno', 'molto', 'poco', 'troppo', 'altro',\n        'altra', 'altri', 'altre', 'stesso', 'stessa', 'stessi', 'stesse', 'così',\n        'anche', 'ancora', 'già', 'mai', 'sempre', 'spesso', 'qualche', 'volta', 'c',\n        'd', 'l', 'all', 'dall', 'dell', 'nell', 'sull', 'coll'\n    ],\n    portuguese: [\n        'eu', 'me', 'mim', 'meu', 'minha', 'meus', 'minhas', 'tu', 'te', 'ti', 'teu',\n        'tua', 'teus', 'tuas', 'ele', 'ela', 'o', 'a', 'lhe', 'seu', 'sua', 'seus',\n        'suas', 'nós', 'nos', 'nosso', 'nossa', 'nossos', 'nossas', 'vós', 'vos',\n        'vosso', 'vossa', 'vossos', 'vossas', 'eles', 'elas', 'os', 'as', 'lhes',\n        'seu', 'sua', 'seus', 'suas', 'quem', 'que', 'qual', 'quais', 'este', 'esta',\n        'estes', 'estas', 'esse', 'essa', 'esses', 'essas', 'aquele', 'aquela',\n        'aqueles', 'aquelas', 'isto', 'isso', 'aquilo', 'sou', 'és', 'é', 'somos',\n        'sois', 'são', 'era', 'eras', 'éramos', 'éreis', 'eram', 'fui', 'foste',\n        'foi', 'fomos', 'fostes', 'foram', 'serei', 'serás', 'será', 'seremos',\n        'sereis', 'serão', 'tenho', 'tens', 'tem', 'temos', 'tendes', 'têm', 'tinha',\n        'tinhas', 'tínhamos', 'tínheis', 'tinham', 'tive', 'tiveste', 'teve',\n        'tivemos', 'tivestes', 'tiveram', 'terei', 'terás', 'terá', 'teremos',\n        'tereis', 'terão', 'um', 'uma', 'uns', 'umas', 'o', 'a', 'os', 'as', 'do',\n        'da', 'dos', 'das', 'e', 'mas', 'ou', 'se', 'porque', 'como', 'quando',\n        'onde', 'com', 'sem', 'sob', 'sobre', 'em', 'de', 'a', 'ao', 'à', 'aos',\n        'às', 'para', 'por', 'pelo', 'pela', 'pelos', 'pelas', 'entre', 'até',\n        'desde', 'durante', 'antes', 'depois', 'aqui', 'aí', 'ali', 'lá', 'cá',\n        'todo', 'toda', 'todos', 'todas', 'cada', 'algum', 'alguma', 'alguns',\n        'algumas', 'nenhum', 'nenhuma', 'muito', 'muita', 'muitos', 'muitas', 'pouco',\n        'pouca', 'poucos', 'poucas', 'mais', 'menos', 'outro', 'outra', 'outros',\n        'outras', 'mesmo', 'mesma', 'mesmos', 'mesmas', 'tal', 'tais', 'tão', 'tanto',\n        'também', 'já', 'ainda', 'sempre', 'nunca', 'talvez'\n    ],\n    dutch: [\n        'ik', 'me', 'mij', 'mijn', 'je', 'jij', 'jou', 'jouw', 'u', 'uw', 'hij', 'hem',\n        'zijn', 'zij', 'ze', 'haar', 'het', 'wij', 'we', 'ons', 'onze', 'jullie', 'je',\n        'zij', 'ze', 'hen', 'hun', 'wie', 'wat', 'welk', 'welke', 'dit', 'dat', 'deze',\n        'die', 'ben', 'bent', 'is', 'zijn', 'was', 'waren', 'zal', 'zult', 'zullen',\n        'heb', 'hebt', 'heeft', 'hebben', 'had', 'hadden', 'een', 'de', 'het', 'en',\n        'of', 'maar', 'als', 'omdat', 'terwijl', 'met', 'zonder', 'op', 'in', 'aan',\n        'uit', 'bij', 'naar', 'van', 'voor', 'door', 'over', 'onder', 'tussen', 'tegen',\n        'sinds', 'tot', 'na', 'tijdens', 'hier', 'daar', 'er', 'waar', 'wanneer',\n        'waarom', 'hoe', 'alle', 'elke', 'enkele', 'veel', 'weinig', 'meer', 'minder',\n        'meest', 'minst', 'zeer', 'ander', 'andere', 'zelf', 'zelfs', 'zo', 'dan',\n        'nu', 'toen', 'al', 'reeds', 'nog', 'ooit', 'nooit', 'altijd', 'soms', 'vaak',\n        'meestal'\n    ]\n};\n\nexport const negationWords: Set<string> = new Set([\n    'no', 'not', 'nor', 'neither', 'never', 'none', 'nothing', 'nowhere', 'nobody',\n    'cannot', 'cant', 'wont', 'dont', 'doesnt', 'didnt', 'isnt', 'arent', 'wasnt',\n    'werent', 'hasnt', 'havent', 'hadnt', 'shouldnt', 'wouldnt', 'couldnt', 'mustnt',\n    'shant', 'neednt', 'oughtnt', 'mightnt'\n]);","export function tokenize(text: string): string[] {\n    // Simple word tokenization that handles contractions and punctuation\n    // Matches words, contractions, and standalone punctuation\n    const tokens = text.match(/[\\w']+|[^\\w\\s]/g) || [];\n    return tokens;\n}\n\nexport function isWord(token: string): boolean {\n    return /^[\\w']+$/.test(token);\n}\n\nexport function isPunctuation(token: string): boolean {\n    return /^[^\\w\\s]$/.test(token);\n}\n\nexport function mergeContractions(text: string): string {\n    // Remove apostrophes from contractions\n    return text.replace(/(\\w)'(\\w)/g, '$1$2');\n}","// Simplified Porter Stemmer implementation\nexport class PorterStemmer {\n    private readonly vowels = /[aeiou]/;\n    private readonly consonant = /[^aeiou]/;\n    \n    stem(word: string): string {\n        if (word.length < 3) return word;\n        \n        const originalCase = this.getCase(word);\n        let w = word.toLowerCase();\n        \n        // Step 1a\n        w = this.step1a(w);\n        // Step 1b\n        w = this.step1b(w);\n        // Step 1c\n        w = this.step1c(w);\n        // Step 2\n        w = this.step2(w);\n        // Step 3\n        w = this.step3(w);\n        // Step 4\n        w = this.step4(w);\n        // Step 5\n        w = this.step5(w);\n        \n        return this.restoreCase(w, originalCase);\n    }\n    \n    private getCase(word: string): string {\n        return word.split('').map(c => c === c.toUpperCase() ? 'U' : 'L').join('');\n    }\n    \n    private restoreCase(word: string, casePattern: string): string {\n        return word.split('').map((c, i) => \n            i < casePattern.length && casePattern[i] === 'U' ? c.toUpperCase() : c\n        ).join('');\n    }\n    \n    private step1a(w: string): string {\n        if (w.endsWith('sses')) return w.slice(0, -2);\n        if (w.endsWith('ies')) return w.slice(0, -2);\n        if (w.endsWith('ss')) return w;\n        if (w.endsWith('s')) return w.slice(0, -1);\n        return w;\n    }\n    \n    private step1b(w: string): string {\n        if (w.endsWith('eed')) {\n            if (this.measure(w.slice(0, -3)) > 0) {\n                return w.slice(0, -1);\n            }\n            return w;\n        }\n        \n        if (w.endsWith('ed')) {\n            const stem = w.slice(0, -2);\n            if (this.hasVowel(stem)) {\n                return this.step1bHelper(stem);\n            }\n        }\n        \n        if (w.endsWith('ing')) {\n            const stem = w.slice(0, -3);\n            if (this.hasVowel(stem)) {\n                return this.step1bHelper(stem);\n            }\n        }\n        \n        return w;\n    }\n    \n    private step1bHelper(w: string): string {\n        if (w.endsWith('at') || w.endsWith('bl') || w.endsWith('iz')) {\n            return w + 'e';\n        }\n        if (this.endsWithDoubleConsonant(w) && !w.endsWith('l') && !w.endsWith('s') && !w.endsWith('z')) {\n            return w.slice(0, -1);\n        }\n        if (this.measure(w) === 1 && this.endsWithCVC(w)) {\n            return w + 'e';\n        }\n        return w;\n    }\n    \n    private step1c(w: string): string {\n        if (w.endsWith('y') && this.hasVowel(w.slice(0, -1))) {\n            return w.slice(0, -1) + 'i';\n        }\n        return w;\n    }\n    \n    private step2(w: string): string {\n        const suffixes: Record<string, string> = {\n            'ational': 'ate',\n            'tional': 'tion',\n            'enci': 'ence',\n            'anci': 'ance',\n            'izer': 'ize',\n            'abli': 'able',\n            'alli': 'al',\n            'entli': 'ent',\n            'eli': 'e',\n            'ousli': 'ous',\n            'ization': 'ize',\n            'ation': 'ate',\n            'ator': 'ate',\n            'alism': 'al',\n            'iveness': 'ive',\n            'fulness': 'ful',\n            'ousness': 'ous',\n            'aliti': 'al',\n            'iviti': 'ive',\n            'biliti': 'ble'\n        };\n        \n        for (const [suffix, replacement] of Object.entries(suffixes)) {\n            if (w.endsWith(suffix)) {\n                const stem = w.slice(0, -suffix.length);\n                if (this.measure(stem) > 0) {\n                    return stem + replacement;\n                }\n            }\n        }\n        \n        return w;\n    }\n    \n    private step3(w: string): string {\n        const suffixes: Record<string, string> = {\n            'icate': 'ic',\n            'ative': '',\n            'alize': 'al',\n            'iciti': 'ic',\n            'ical': 'ic',\n            'ful': '',\n            'ness': ''\n        };\n        \n        for (const [suffix, replacement] of Object.entries(suffixes)) {\n            if (w.endsWith(suffix)) {\n                const stem = w.slice(0, -suffix.length);\n                if (this.measure(stem) > 0) {\n                    return stem + replacement;\n                }\n            }\n        }\n        \n        return w;\n    }\n    \n    private step4(w: string): string {\n        const suffixes = ['al', 'ance', 'ence', 'er', 'ic', 'able', 'ible', 'ant',\n                         'ement', 'ment', 'ent', 'ion', 'ou', 'ism', 'ate', 'iti',\n                         'ous', 'ive', 'ize'];\n        \n        for (const suffix of suffixes) {\n            if (w.endsWith(suffix)) {\n                const stem = w.slice(0, -suffix.length);\n                if (suffix === 'ion' && (stem.endsWith('s') || stem.endsWith('t'))) {\n                    if (this.measure(stem) > 1) {\n                        return stem;\n                    }\n                } else if (this.measure(stem) > 1) {\n                    return stem;\n                }\n            }\n        }\n        \n        return w;\n    }\n    \n    private step5(w: string): string {\n        // Step 5a\n        if (w.endsWith('e')) {\n            const stem = w.slice(0, -1);\n            const m = this.measure(stem);\n            if (m > 1 || (m === 1 && !this.endsWithCVC(stem))) {\n                return stem;\n            }\n        }\n        \n        // Step 5b\n        if (w.endsWith('ll') && this.measure(w) > 1) {\n            return w.slice(0, -1);\n        }\n        \n        return w;\n    }\n    \n    private hasVowel(w: string): boolean {\n        return this.vowels.test(w);\n    }\n    \n    private measure(w: string): number {\n        // Count VC sequences\n        let count = 0;\n        let previousWasVowel = false;\n        \n        for (const char of w) {\n            const isVowel = this.vowels.test(char);\n            if (!isVowel && previousWasVowel) {\n                count++;\n            }\n            previousWasVowel = isVowel;\n        }\n        \n        return count;\n    }\n    \n    private endsWithDoubleConsonant(w: string): boolean {\n        return w.length >= 2 && \n               w[w.length - 1] === w[w.length - 2] && \n               this.consonant.test(w[w.length - 1]);\n    }\n    \n    private endsWithCVC(w: string): boolean {\n        if (w.length < 3) return false;\n        \n        const lastThree = w.slice(-3);\n        return this.consonant.test(lastThree[0]) &&\n               this.vowels.test(lastThree[1]) &&\n               this.consonant.test(lastThree[2]) &&\n               !['w', 'x', 'y'].includes(lastThree[2]);\n    }\n}\n\n// Simplified Snowball Stemmer (Porter2)\nexport class SnowballStemmer extends PorterStemmer {\n    // Inherits from Porter for now, could be extended with Porter2 rules\n}\n\n// Simplified Lancaster Stemmer (more aggressive)\nexport class LancasterStemmer {\n    stem(word: string): string {\n        if (word.length < 3) return word;\n        \n        const originalCase = this.getCase(word);\n        let w = word.toLowerCase();\n        \n        // More aggressive stemming rules\n        const rules = [\n            { suffix: 'ational', replacement: 'e' },\n            { suffix: 'iveness', replacement: 'e' },\n            { suffix: 'fulness', replacement: 'e' },\n            { suffix: 'ousness', replacement: 'e' },\n            { suffix: 'ization', replacement: 'e' },\n            { suffix: 'tional', replacement: 'e' },\n            { suffix: 'biliti', replacement: 'le' },\n            { suffix: 'icate', replacement: '' },\n            { suffix: 'ative', replacement: '' },\n            { suffix: 'alize', replacement: '' },\n            { suffix: 'iciti', replacement: '' },\n            { suffix: 'ical', replacement: '' },\n            { suffix: 'ness', replacement: '' },\n            { suffix: 'ance', replacement: '' },\n            { suffix: 'ence', replacement: '' },\n            { suffix: 'able', replacement: '' },\n            { suffix: 'ible', replacement: '' },\n            { suffix: 'ment', replacement: '' },\n            { suffix: 'sion', replacement: 't' },\n            { suffix: 'tion', replacement: 't' },\n            { suffix: 'ator', replacement: 'e' },\n            { suffix: 'izer', replacement: '' },\n            { suffix: 'ing', replacement: '' },\n            { suffix: 'ed', replacement: '' },\n            { suffix: 'er', replacement: '' },\n            { suffix: 'ly', replacement: '' },\n            { suffix: 'y', replacement: 'i' },\n            { suffix: 'es', replacement: '' },\n            { suffix: 's', replacement: '' }\n        ];\n        \n        for (const rule of rules) {\n            if (w.endsWith(rule.suffix) && w.length - rule.suffix.length >= 2) {\n                w = w.slice(0, -rule.suffix.length) + rule.replacement;\n                break;\n            }\n        }\n        \n        return this.restoreCase(w, originalCase);\n    }\n    \n    private getCase(word: string): string {\n        return word.split('').map(c => c === c.toUpperCase() ? 'U' : 'L').join('');\n    }\n    \n    private restoreCase(word: string, casePattern: string): string {\n        return word.split('').map((c, i) => \n            i < casePattern.length && casePattern[i] === 'U' ? c.toUpperCase() : c\n        ).join('');\n    }\n}\n\nexport function getStemmer(type: 'porter' | 'snowball' | 'lancaster'): { stem: (word: string) => string } {\n    switch (type) {\n        case 'porter':\n            return new PorterStemmer();\n        case 'snowball':\n            return new SnowballStemmer();\n        case 'lancaster':\n            return new LancasterStemmer();\n        default:\n            return new PorterStemmer();\n    }\n}","import { stopwords, negationWords } from '../data/stopwords';\nimport { tokenize, isWord, isPunctuation, mergeContractions } from './tokenizer';\nimport { getStemmer } from './stemmers';\n\nexport interface TrimOptions {\n    removeStopwords?: boolean;\n    removePunctuation?: boolean;\n    removeSpaces?: boolean;\n    useStemming?: boolean;\n    stemmer?: 'porter' | 'snowball' | 'lancaster';\n    language?: string;\n}\n\nexport function trim(text: string, options: TrimOptions = {}): string {\n    const {\n        removeStopwords = true,\n        removePunctuation = false,\n        removeSpaces = true,\n        useStemming = false,\n        stemmer = 'porter',\n        language = 'english'\n    } = options;\n    \n    // Step 1: Merge contractions\n    text = mergeContractions(text);\n    \n    // Step 2: Tokenize\n    const tokens = tokenize(text);\n    \n    // Step 3: Get stopwords for the language\n    const langStopwords = stopwords[language] || stopwords.english;\n    const stopwordSet = new Set(langStopwords.map(w => w.toLowerCase()));\n    \n    // Step 4: Process tokens\n    let processedTokens: string[] = [];\n    const stemmerInstance = useStemming ? getStemmer(stemmer) : null;\n    \n    for (const token of tokens) {\n        if (isPunctuation(token)) {\n            if (!removePunctuation) {\n                processedTokens.push(token);\n            }\n            continue;\n        }\n        \n        if (isWord(token)) {\n            const lowerToken = token.toLowerCase();\n            \n            // Keep negation words even if removing stopwords\n            if (removeStopwords && stopwordSet.has(lowerToken) && !negationWords.has(lowerToken)) {\n                continue;\n            }\n            \n            let processedToken = token;\n            \n            // Apply stemming if enabled\n            if (stemmerInstance) {\n                processedToken = stemmerInstance.stem(processedToken);\n            }\n            \n            processedTokens.push(processedToken);\n        }\n    }\n    \n    // Step 5: Join tokens\n    let result: string;\n    \n    if (removeSpaces) {\n        // Join without spaces\n        result = processedTokens.join('');\n    } else {\n        // Join with spaces, but handle punctuation properly\n        result = '';\n        for (let i = 0; i < processedTokens.length; i++) {\n            const token = processedTokens[i];\n            \n            if (i === 0) {\n                result += token;\n            } else if (isPunctuation(token)) {\n                // No space before punctuation\n                result += token;\n            } else if (i > 0 && isPunctuation(processedTokens[i - 1])) {\n                // Space after punctuation\n                result += ' ' + token;\n            } else {\n                result += ' ' + token;\n            }\n        }\n    }\n    \n    return result;\n}\n\nexport function getCompressionStats(original: string, compressed: string) {\n    const originalChars = original.length;\n    const compressedChars = compressed.length;\n    const originalWords = original.split(/\\s+/).filter(w => w.length > 0).length;\n    const compressedWords = compressed.split(/\\s+/).filter(w => w.length > 0).length;\n    \n    const charReduction = originalChars > 0 \n        ? Math.round(((originalChars - compressedChars) / originalChars) * 100)\n        : 0;\n    \n    return {\n        originalChars,\n        compressedChars,\n        originalWords,\n        compressedWords,\n        charReduction\n    };\n}","import { trim, getCompressionStats, TrimOptions } from './lib/promptpress';\n\n// DOM elements\nconst inputTextArea = document.getElementById('inputText') as HTMLTextAreaElement;\nconst outputTextArea = document.getElementById('outputText') as HTMLTextAreaElement;\nconst compressBtn = document.getElementById('compressBtn') as HTMLButtonElement;\nconst copyBtn = document.getElementById('copyBtn') as HTMLButtonElement;\n\n// Stats elements\nconst inputCharsSpan = document.getElementById('inputChars') as HTMLSpanElement;\nconst inputWordsSpan = document.getElementById('inputWords') as HTMLSpanElement;\nconst outputCharsSpan = document.getElementById('outputChars') as HTMLSpanElement;\nconst outputWordsSpan = document.getElementById('outputWords') as HTMLSpanElement;\nconst compressionRatioSpan = document.getElementById('compressionRatio') as HTMLSpanElement;\n\n// Options elements\nconst removeStopwordsCheckbox = document.getElementById('removeStopwords') as HTMLInputElement;\nconst removePunctuationCheckbox = document.getElementById('removePunctuation') as HTMLInputElement;\nconst removeSpacesCheckbox = document.getElementById('removeSpaces') as HTMLInputElement;\nconst useStemmingCheckbox = document.getElementById('useStemming') as HTMLInputElement;\nconst stemmerTypeSelect = document.getElementById('stemmerType') as HTMLSelectElement;\nconst languageSelect = document.getElementById('language') as HTMLSelectElement;\nconst stemmerOptions = document.querySelector('.stemmer-options') as HTMLDivElement;\n\n// Initialize event listeners\nfunction initializeApp() {\n    // Text input listeners\n    inputTextArea.addEventListener('input', updateInputStats);\n    \n    // Button listeners\n    compressBtn.addEventListener('click', compressText);\n    copyBtn.addEventListener('click', copyToClipboard);\n    \n    // Option listeners\n    useStemmingCheckbox.addEventListener('change', toggleStemmerOptions);\n    \n    // Initialize stats\n    updateInputStats();\n}\n\n// Update input statistics\nfunction updateInputStats() {\n    const text = inputTextArea.value;\n    const chars = text.length;\n    const words = text.trim() ? text.trim().split(/\\s+/).length : 0;\n    \n    inputCharsSpan.textContent = chars.toString();\n    inputWordsSpan.textContent = words.toString();\n}\n\n// Toggle stemmer options visibility\nfunction toggleStemmerOptions() {\n    stemmerOptions.style.display = useStemmingCheckbox.checked ? 'flex' : 'none';\n}\n\n// Compress text\nfunction compressText() {\n    const inputText = inputTextArea.value;\n    \n    if (!inputText.trim()) {\n        alert('Please enter some text to compress');\n        return;\n    }\n    \n    // Get options\n    const options: TrimOptions = {\n        removeStopwords: removeStopwordsCheckbox.checked,\n        removePunctuation: removePunctuationCheckbox.checked,\n        removeSpaces: removeSpacesCheckbox.checked,\n        useStemming: useStemmingCheckbox.checked,\n        stemmer: stemmerTypeSelect.value as 'porter' | 'snowball' | 'lancaster',\n        language: languageSelect.value\n    };\n    \n    // Compress text\n    const compressedText = trim(inputText, options);\n    \n    // Update output\n    outputTextArea.value = compressedText;\n    \n    // Update stats\n    const stats = getCompressionStats(inputText, compressedText);\n    outputCharsSpan.textContent = stats.compressedChars.toString();\n    outputWordsSpan.textContent = stats.compressedWords.toString();\n    compressionRatioSpan.textContent = `${stats.charReduction}%`;\n    \n    // Enable copy button\n    copyBtn.disabled = false;\n    \n    // Animate the compression ratio\n    compressionRatioSpan.style.animation = 'none';\n    setTimeout(() => {\n        compressionRatioSpan.style.animation = 'pulse 0.5s ease-in-out';\n    }, 10);\n}\n\n// Copy to clipboard\nasync function copyToClipboard() {\n    const text = outputTextArea.value;\n    \n    try {\n        await navigator.clipboard.writeText(text);\n        \n        // Show success feedback\n        const originalText = copyBtn.textContent;\n        copyBtn.textContent = 'Copied!';\n        copyBtn.style.backgroundColor = '#10b981';\n        \n        setTimeout(() => {\n            copyBtn.textContent = originalText;\n            copyBtn.style.backgroundColor = '';\n        }, 2000);\n    } catch (err) {\n        console.error('Failed to copy text:', err);\n        alert('Failed to copy text to clipboard');\n    }\n}\n\n// Add pulse animation\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes pulse {\n        0% { transform: scale(1); }\n        50% { transform: scale(1.1); }\n        100% { transform: scale(1); }\n    }\n`;\ndocument.head.appendChild(style);\n\n// Initialize app when DOM is loaded\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initializeApp);\n} else {\n    initializeApp();\n}"],"names":["stopwords","negationWords","tokenize","text","isWord","token","isPunctuation","mergeContractions","PorterStemmer","word","originalCase","w","c","casePattern","i","stem","suffixes","suffix","replacement","m","count","previousWasVowel","char","isVowel","lastThree","SnowballStemmer","LancasterStemmer","rules","rule","getStemmer","type","trim","options","removeStopwords","removePunctuation","removeSpaces","useStemming","stemmer","language","tokens","langStopwords","stopwordSet","processedTokens","stemmerInstance","lowerToken","processedToken","result","getCompressionStats","original","compressed","originalChars","compressedChars","originalWords","compressedWords","charReduction","inputTextArea","outputTextArea","compressBtn","copyBtn","inputCharsSpan","inputWordsSpan","outputCharsSpan","outputWordsSpan","compressionRatioSpan","removeStopwordsCheckbox","removePunctuationCheckbox","removeSpacesCheckbox","useStemmingCheckbox","stemmerTypeSelect","languageSelect","stemmerOptions","initializeApp","updateInputStats","compressText","copyToClipboard","toggleStemmerOptions","chars","words","inputText","compressedText","stats","originalText","err","style"],"mappings":"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"}